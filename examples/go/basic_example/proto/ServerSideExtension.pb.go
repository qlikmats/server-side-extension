// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ServerSideExtension.proto

/*
Package qlik_sse is a generated protocol buffer package.

*
A gRPC definition for the Qlik engine extension protocol.

It is generated from these files:
	ServerSideExtension.proto

It has these top-level messages:
	Empty
	Parameter
	FunctionDefinition
	Capabilities
	Dual
	Row
	BundledRows
	ScriptRequestHeader
	FunctionRequestHeader
	CommonRequestHeader
*/
package qlik_sse

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *
// Data types of the parameters and return values.
type DataType int32

const (
	DataType_STRING  DataType = 0
	DataType_NUMERIC DataType = 1
	DataType_DUAL    DataType = 2
)

var DataType_name = map[int32]string{
	0: "STRING",
	1: "NUMERIC",
	2: "DUAL",
}
var DataType_value = map[string]int32{
	"STRING":  0,
	"NUMERIC": 1,
	"DUAL":    2,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Types of functions (determined by their return values).
type FunctionType int32

const (
	FunctionType_SCALAR      FunctionType = 0
	FunctionType_AGGREGATION FunctionType = 1
	FunctionType_TENSOR      FunctionType = 2
)

var FunctionType_name = map[int32]string{
	0: "SCALAR",
	1: "AGGREGATION",
	2: "TENSOR",
}
var FunctionType_value = map[string]int32{
	"SCALAR":      0,
	"AGGREGATION": 1,
	"TENSOR":      2,
}

func (x FunctionType) String() string {
	return proto.EnumName(FunctionType_name, int32(x))
}
func (FunctionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// *
// An empty message used when nothing is to be passed in a call.
type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// *
// Parameter definition for functions and script calls.
type Parameter struct {
	DataType DataType `protobuf:"varint,1,opt,name=dataType,enum=qlik.sse.DataType" json:"dataType,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Parameter) GetDataType() DataType {
	if m != nil {
		return m.DataType
	}
	return DataType_STRING
}

func (m *Parameter) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// *
// The definition of a function, which informs the Qlik engine how to use it.
type FunctionDefinition struct {
	Name         string       `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	FunctionType FunctionType `protobuf:"varint,2,opt,name=functionType,enum=qlik.sse.FunctionType" json:"functionType,omitempty"`
	ReturnType   DataType     `protobuf:"varint,3,opt,name=returnType,enum=qlik.sse.DataType" json:"returnType,omitempty"`
	Params       []*Parameter `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
	FunctionId   int32        `protobuf:"varint,5,opt,name=functionId" json:"functionId,omitempty"`
}

func (m *FunctionDefinition) Reset()                    { *m = FunctionDefinition{} }
func (m *FunctionDefinition) String() string            { return proto.CompactTextString(m) }
func (*FunctionDefinition) ProtoMessage()               {}
func (*FunctionDefinition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FunctionDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FunctionDefinition) GetFunctionType() FunctionType {
	if m != nil {
		return m.FunctionType
	}
	return FunctionType_SCALAR
}

func (m *FunctionDefinition) GetReturnType() DataType {
	if m != nil {
		return m.ReturnType
	}
	return DataType_STRING
}

func (m *FunctionDefinition) GetParams() []*Parameter {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *FunctionDefinition) GetFunctionId() int32 {
	if m != nil {
		return m.FunctionId
	}
	return 0
}

// *
// A full description of the plugin, sent to the Qlik engine, listing all functions available and indicating whether script evaluation is allowed.
type Capabilities struct {
	AllowScript      bool                  `protobuf:"varint,1,opt,name=allowScript" json:"allowScript,omitempty"`
	Functions        []*FunctionDefinition `protobuf:"bytes,2,rep,name=functions" json:"functions,omitempty"`
	PluginIdentifier string                `protobuf:"bytes,3,opt,name=pluginIdentifier" json:"pluginIdentifier,omitempty"`
	PluginVersion    string                `protobuf:"bytes,4,opt,name=pluginVersion" json:"pluginVersion,omitempty"`
}

func (m *Capabilities) Reset()                    { *m = Capabilities{} }
func (m *Capabilities) String() string            { return proto.CompactTextString(m) }
func (*Capabilities) ProtoMessage()               {}
func (*Capabilities) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Capabilities) GetAllowScript() bool {
	if m != nil {
		return m.AllowScript
	}
	return false
}

func (m *Capabilities) GetFunctions() []*FunctionDefinition {
	if m != nil {
		return m.Functions
	}
	return nil
}

func (m *Capabilities) GetPluginIdentifier() string {
	if m != nil {
		return m.PluginIdentifier
	}
	return ""
}

func (m *Capabilities) GetPluginVersion() string {
	if m != nil {
		return m.PluginVersion
	}
	return ""
}

// *
// The basic data type for the data stream. Can contain double, string, or both.
type Dual struct {
	NumData float64 `protobuf:"fixed64,1,opt,name=numData" json:"numData,omitempty"`
	StrData string  `protobuf:"bytes,2,opt,name=strData" json:"strData,omitempty"`
}

func (m *Dual) Reset()                    { *m = Dual{} }
func (m *Dual) String() string            { return proto.CompactTextString(m) }
func (*Dual) ProtoMessage()               {}
func (*Dual) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Dual) GetNumData() float64 {
	if m != nil {
		return m.NumData
	}
	return 0
}

func (m *Dual) GetStrData() string {
	if m != nil {
		return m.StrData
	}
	return ""
}

// *
// A row of duals.
type Row struct {
	Duals []*Dual `protobuf:"bytes,1,rep,name=duals" json:"duals,omitempty"`
}

func (m *Row) Reset()                    { *m = Row{} }
func (m *Row) String() string            { return proto.CompactTextString(m) }
func (*Row) ProtoMessage()               {}
func (*Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Row) GetDuals() []*Dual {
	if m != nil {
		return m.Duals
	}
	return nil
}

// *
// A number of rows collected in one message. The actual number will depend on the size of each row and is adjusted to optimize throughput.
type BundledRows struct {
	Rows []*Row `protobuf:"bytes,1,rep,name=rows" json:"rows,omitempty"`
}

func (m *BundledRows) Reset()                    { *m = BundledRows{} }
func (m *BundledRows) String() string            { return proto.CompactTextString(m) }
func (*BundledRows) ProtoMessage()               {}
func (*BundledRows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *BundledRows) GetRows() []*Row {
	if m != nil {
		return m.Rows
	}
	return nil
}

// *
// A header sent at the start of an EvaluateScript request under the key "qlik-scriptrequestheader-bin".
type ScriptRequestHeader struct {
	Script       string       `protobuf:"bytes,1,opt,name=script" json:"script,omitempty"`
	FunctionType FunctionType `protobuf:"varint,2,opt,name=functionType,enum=qlik.sse.FunctionType" json:"functionType,omitempty"`
	ReturnType   DataType     `protobuf:"varint,3,opt,name=returnType,enum=qlik.sse.DataType" json:"returnType,omitempty"`
	Params       []*Parameter `protobuf:"bytes,4,rep,name=params" json:"params,omitempty"`
}

func (m *ScriptRequestHeader) Reset()                    { *m = ScriptRequestHeader{} }
func (m *ScriptRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*ScriptRequestHeader) ProtoMessage()               {}
func (*ScriptRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ScriptRequestHeader) GetScript() string {
	if m != nil {
		return m.Script
	}
	return ""
}

func (m *ScriptRequestHeader) GetFunctionType() FunctionType {
	if m != nil {
		return m.FunctionType
	}
	return FunctionType_SCALAR
}

func (m *ScriptRequestHeader) GetReturnType() DataType {
	if m != nil {
		return m.ReturnType
	}
	return DataType_STRING
}

func (m *ScriptRequestHeader) GetParams() []*Parameter {
	if m != nil {
		return m.Params
	}
	return nil
}

// *
// A header sent at the start of an ExecuteFunction request under the key "qlik-functionrequestheader-bin".
type FunctionRequestHeader struct {
	FunctionId int32  `protobuf:"varint,1,opt,name=functionId" json:"functionId,omitempty"`
	Version    string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
}

func (m *FunctionRequestHeader) Reset()                    { *m = FunctionRequestHeader{} }
func (m *FunctionRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*FunctionRequestHeader) ProtoMessage()               {}
func (*FunctionRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FunctionRequestHeader) GetFunctionId() int32 {
	if m != nil {
		return m.FunctionId
	}
	return 0
}

func (m *FunctionRequestHeader) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// *
// A header sent at the start of both an EvaluateScript request and an ExecuteFunction request under the key "qlik-commonrequestheader-bin".
type CommonRequestHeader struct {
	AppId       string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	UserId      string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
	Cardinality int64  `protobuf:"varint,3,opt,name=cardinality" json:"cardinality,omitempty"`
}

func (m *CommonRequestHeader) Reset()                    { *m = CommonRequestHeader{} }
func (m *CommonRequestHeader) String() string            { return proto.CompactTextString(m) }
func (*CommonRequestHeader) ProtoMessage()               {}
func (*CommonRequestHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CommonRequestHeader) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *CommonRequestHeader) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *CommonRequestHeader) GetCardinality() int64 {
	if m != nil {
		return m.Cardinality
	}
	return 0
}

func init() {
	proto.RegisterType((*Empty)(nil), "qlik.sse.Empty")
	proto.RegisterType((*Parameter)(nil), "qlik.sse.Parameter")
	proto.RegisterType((*FunctionDefinition)(nil), "qlik.sse.FunctionDefinition")
	proto.RegisterType((*Capabilities)(nil), "qlik.sse.Capabilities")
	proto.RegisterType((*Dual)(nil), "qlik.sse.Dual")
	proto.RegisterType((*Row)(nil), "qlik.sse.Row")
	proto.RegisterType((*BundledRows)(nil), "qlik.sse.BundledRows")
	proto.RegisterType((*ScriptRequestHeader)(nil), "qlik.sse.ScriptRequestHeader")
	proto.RegisterType((*FunctionRequestHeader)(nil), "qlik.sse.FunctionRequestHeader")
	proto.RegisterType((*CommonRequestHeader)(nil), "qlik.sse.CommonRequestHeader")
	proto.RegisterEnum("qlik.sse.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("qlik.sse.FunctionType", FunctionType_name, FunctionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Connector service

type ConnectorClient interface {
	// / A handshake call for the Qlik engine to retrieve the capability of the plugin.
	GetCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Capabilities, error)
	// / Requests a function to be executed as specified in the header.
	ExecuteFunction(ctx context.Context, opts ...grpc.CallOption) (Connector_ExecuteFunctionClient, error)
	// / Requests a script to be evaluated as specified in the header.
	EvaluateScript(ctx context.Context, opts ...grpc.CallOption) (Connector_EvaluateScriptClient, error)
}

type connectorClient struct {
	cc *grpc.ClientConn
}

func NewConnectorClient(cc *grpc.ClientConn) ConnectorClient {
	return &connectorClient{cc}
}

func (c *connectorClient) GetCapabilities(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Capabilities, error) {
	out := new(Capabilities)
	err := grpc.Invoke(ctx, "/qlik.sse.Connector/GetCapabilities", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectorClient) ExecuteFunction(ctx context.Context, opts ...grpc.CallOption) (Connector_ExecuteFunctionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[0], c.cc, "/qlik.sse.Connector/ExecuteFunction", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorExecuteFunctionClient{stream}
	return x, nil
}

type Connector_ExecuteFunctionClient interface {
	Send(*BundledRows) error
	Recv() (*BundledRows, error)
	grpc.ClientStream
}

type connectorExecuteFunctionClient struct {
	grpc.ClientStream
}

func (x *connectorExecuteFunctionClient) Send(m *BundledRows) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorExecuteFunctionClient) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *connectorClient) EvaluateScript(ctx context.Context, opts ...grpc.CallOption) (Connector_EvaluateScriptClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Connector_serviceDesc.Streams[1], c.cc, "/qlik.sse.Connector/EvaluateScript", opts...)
	if err != nil {
		return nil, err
	}
	x := &connectorEvaluateScriptClient{stream}
	return x, nil
}

type Connector_EvaluateScriptClient interface {
	Send(*BundledRows) error
	Recv() (*BundledRows, error)
	grpc.ClientStream
}

type connectorEvaluateScriptClient struct {
	grpc.ClientStream
}

func (x *connectorEvaluateScriptClient) Send(m *BundledRows) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connectorEvaluateScriptClient) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Connector service

type ConnectorServer interface {
	// / A handshake call for the Qlik engine to retrieve the capability of the plugin.
	GetCapabilities(context.Context, *Empty) (*Capabilities, error)
	// / Requests a function to be executed as specified in the header.
	ExecuteFunction(Connector_ExecuteFunctionServer) error
	// / Requests a script to be evaluated as specified in the header.
	EvaluateScript(Connector_EvaluateScriptServer) error
}

func RegisterConnectorServer(s *grpc.Server, srv ConnectorServer) {
	s.RegisterService(&_Connector_serviceDesc, srv)
}

func _Connector_GetCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectorServer).GetCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qlik.sse.Connector/GetCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectorServer).GetCapabilities(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Connector_ExecuteFunction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServer).ExecuteFunction(&connectorExecuteFunctionServer{stream})
}

type Connector_ExecuteFunctionServer interface {
	Send(*BundledRows) error
	Recv() (*BundledRows, error)
	grpc.ServerStream
}

type connectorExecuteFunctionServer struct {
	grpc.ServerStream
}

func (x *connectorExecuteFunctionServer) Send(m *BundledRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorExecuteFunctionServer) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Connector_EvaluateScript_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnectorServer).EvaluateScript(&connectorEvaluateScriptServer{stream})
}

type Connector_EvaluateScriptServer interface {
	Send(*BundledRows) error
	Recv() (*BundledRows, error)
	grpc.ServerStream
}

type connectorEvaluateScriptServer struct {
	grpc.ServerStream
}

func (x *connectorEvaluateScriptServer) Send(m *BundledRows) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connectorEvaluateScriptServer) Recv() (*BundledRows, error) {
	m := new(BundledRows)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Connector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qlik.sse.Connector",
	HandlerType: (*ConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCapabilities",
			Handler:    _Connector_GetCapabilities_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteFunction",
			Handler:       _Connector_ExecuteFunction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "EvaluateScript",
			Handler:       _Connector_EvaluateScript_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ServerSideExtension.proto",
}

func init() { proto.RegisterFile("ServerSideExtension.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xce, 0xe6, 0x8f, 0x78, 0x02, 0xc4, 0x5a, 0x0a, 0x72, 0x51, 0x55, 0xa5, 0x16, 0x87, 0x08,
	0xd4, 0x08, 0xa5, 0x87, 0x4a, 0xa8, 0x97, 0x90, 0x98, 0x34, 0x12, 0x0d, 0xed, 0x26, 0xf4, 0xbe,
	0xc4, 0x43, 0xb5, 0xaa, 0x63, 0x9b, 0xf5, 0x9a, 0xc0, 0xcb, 0xf5, 0x01, 0xfa, 0x00, 0x7d, 0x83,
	0xbe, 0x43, 0x8f, 0x95, 0x37, 0x36, 0x76, 0xa0, 0xbd, 0xf4, 0xd4, 0x9b, 0x67, 0xe6, 0x9b, 0x9f,
	0xef, 0x9b, 0xf1, 0xc2, 0xf3, 0x29, 0xca, 0x5b, 0x94, 0x53, 0xe1, 0xa2, 0x73, 0xa7, 0xd0, 0x8f,
	0x44, 0xe0, 0x77, 0x43, 0x19, 0xa8, 0x80, 0x36, 0x6e, 0x3c, 0xf1, 0xb5, 0x1b, 0x45, 0x68, 0x6f,
	0x40, 0xcd, 0x59, 0x84, 0xea, 0xde, 0xbe, 0x00, 0xe3, 0x23, 0x97, 0x7c, 0x81, 0x0a, 0x25, 0xed,
	0x42, 0xc3, 0xe5, 0x8a, 0xcf, 0xee, 0x43, 0xb4, 0x48, 0x9b, 0x74, 0xb6, 0x7b, 0xb4, 0x9b, 0xa5,
	0x74, 0x87, 0x69, 0x84, 0x3d, 0x60, 0x28, 0x85, 0xaa, 0xcf, 0x17, 0x68, 0x95, 0xdb, 0xa4, 0x63,
	0x30, 0xfd, 0x6d, 0xff, 0x24, 0x40, 0xcf, 0x62, 0x7f, 0xae, 0x44, 0xe0, 0x0f, 0xf1, 0x5a, 0xf8,
	0x22, 0xf9, 0x7a, 0x80, 0x92, 0x1c, 0x4a, 0x4f, 0x60, 0xf3, 0x3a, 0x45, 0xea, 0x96, 0x65, 0xdd,
	0x72, 0x2f, 0x6f, 0x79, 0x56, 0x88, 0xb2, 0x35, 0x2c, 0xed, 0x01, 0x48, 0x54, 0xb1, 0x5c, 0x65,
	0x56, 0xfe, 0x3a, 0x6c, 0x01, 0x45, 0x8f, 0xa0, 0x1e, 0x26, 0x5c, 0x23, 0xab, 0xda, 0xae, 0x74,
	0x9a, 0xbd, 0x9d, 0x1c, 0xff, 0xa0, 0x01, 0x4b, 0x21, 0xf4, 0x25, 0x40, 0xd6, 0x70, 0xec, 0x5a,
	0xb5, 0x36, 0xe9, 0xd4, 0x58, 0xc1, 0x63, 0x7f, 0x23, 0xb0, 0x39, 0xe0, 0x21, 0xbf, 0x12, 0x9e,
	0x50, 0x02, 0x23, 0xda, 0x86, 0x26, 0xf7, 0xbc, 0x60, 0x39, 0x9d, 0x4b, 0x11, 0x2a, 0x4d, 0xb4,
	0xc1, 0x8a, 0x2e, 0x7a, 0x02, 0x46, 0x56, 0x20, 0xb2, 0xca, 0x7a, 0x84, 0x17, 0x4f, 0xc9, 0xe6,
	0xa2, 0xb1, 0x1c, 0x4e, 0x0f, 0xc1, 0x0c, 0xbd, 0xf8, 0x8b, 0xf0, 0xc7, 0x2e, 0xfa, 0x4a, 0x5c,
	0x0b, 0x94, 0x9a, 0xb5, 0xc1, 0x9e, 0xf8, 0xe9, 0x01, 0x6c, 0xad, 0x7c, 0x9f, 0x51, 0x26, 0xdb,
	0xb7, 0xaa, 0x1a, 0xb8, 0xee, 0xb4, 0x4f, 0xa0, 0x3a, 0x8c, 0xb9, 0x47, 0x2d, 0xd8, 0xf0, 0xe3,
	0x45, 0x22, 0x98, 0x9e, 0x99, 0xb0, 0xcc, 0x4c, 0x22, 0x91, 0x92, 0x3a, 0xb2, 0xda, 0x70, 0x66,
	0xda, 0x47, 0x50, 0x61, 0xc1, 0x92, 0x1e, 0x40, 0xcd, 0x8d, 0xb9, 0x17, 0x59, 0x44, 0x93, 0xd9,
	0x2e, 0xe8, 0x1f, 0x73, 0x8f, 0xad, 0x82, 0xf6, 0x31, 0x34, 0x4f, 0x63, 0xdf, 0xf5, 0xd0, 0x65,
	0xc1, 0x32, 0xa2, 0xaf, 0xa0, 0x2a, 0x83, 0x65, 0x96, 0xb3, 0x95, 0xe7, 0xb0, 0x60, 0xc9, 0x74,
	0xc8, 0xfe, 0x4e, 0x60, 0x67, 0xa5, 0x19, 0xc3, 0x9b, 0x18, 0x23, 0xf5, 0x1e, 0xb9, 0x8b, 0x92,
	0xee, 0x41, 0x3d, 0xca, 0xd5, 0x35, 0x58, 0x6a, 0xfd, 0xd7, 0x87, 0x64, 0x7f, 0x82, 0xdd, 0xac,
	0xfd, 0x3a, 0x9b, 0xf5, 0x0b, 0x23, 0x8f, 0x2f, 0x2c, 0x91, 0xff, 0x36, 0x5d, 0x60, 0x2a, 0x7f,
	0x6a, 0xda, 0x08, 0x3b, 0x83, 0x60, 0xb1, 0x78, 0x5c, 0xf0, 0x19, 0xd4, 0x78, 0x18, 0xa6, 0xb5,
	0x0c, 0xb6, 0x32, 0x12, 0xd1, 0xe2, 0x08, 0xe5, 0xd8, 0x4d, 0xab, 0xa4, 0x56, 0x72, 0xaf, 0x73,
	0x2e, 0x5d, 0xe1, 0x73, 0x4f, 0xa8, 0x7b, 0xcd, 0xbc, 0xc2, 0x8a, 0xae, 0xc3, 0xd7, 0xd0, 0xc8,
	0xe8, 0x53, 0x80, 0xfa, 0x74, 0xc6, 0xc6, 0x93, 0x91, 0x59, 0xa2, 0x4d, 0xd8, 0x98, 0x5c, 0x7e,
	0x70, 0xd8, 0x78, 0x60, 0x12, 0xda, 0x80, 0xea, 0xf0, 0xb2, 0x7f, 0x6e, 0x96, 0x0f, 0xdf, 0xc2,
	0x66, 0x51, 0x67, 0x9d, 0x32, 0xe8, 0x9f, 0xf7, 0x99, 0x59, 0xa2, 0x2d, 0x68, 0xf6, 0x47, 0x23,
	0xe6, 0x8c, 0xfa, 0xb3, 0xf1, 0xc5, 0xc4, 0x24, 0x49, 0x70, 0xe6, 0x4c, 0xa6, 0x17, 0xcc, 0x2c,
	0xf7, 0x7e, 0x10, 0x30, 0x06, 0x81, 0xef, 0xe3, 0x5c, 0x05, 0x92, 0xbe, 0x83, 0xd6, 0x08, 0xd5,
	0xda, 0xaf, 0xd5, 0xca, 0xf5, 0xd5, 0xaf, 0xd6, 0x7e, 0x61, 0xb5, 0x45, 0xa0, 0x5d, 0xa2, 0x0e,
	0xb4, 0x9c, 0x3b, 0x9c, 0xc7, 0x0a, 0xb3, 0x59, 0xe8, 0x6e, 0x0e, 0x2e, 0xdc, 0xe1, 0xfe, 0x9f,
	0xdd, 0x76, 0xa9, 0x43, 0x8e, 0x09, 0x1d, 0xc2, 0xb6, 0x73, 0xcb, 0xbd, 0x98, 0x2b, 0x4c, 0x7f,
	0xde, 0x7f, 0xa8, 0x72, 0x5a, 0xf9, 0x45, 0xc8, 0x55, 0x5d, 0xbf, 0xbd, 0x6f, 0x7e, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x3f, 0x38, 0x7e, 0xab, 0x98, 0x05, 0x00, 0x00,
}
